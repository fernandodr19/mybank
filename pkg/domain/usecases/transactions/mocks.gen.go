// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package transactions

import (
	"context"
	"github.com/fernandodr19/mybank-tx/pkg/domain/entities/operations"
	"github.com/fernandodr19/mybank-tx/pkg/domain/vos"
	"sync"
)

// TransactionsMockUsecase is a mock implementation of Usecase.
//
// 	func TestSomethingThatUsesUsecase(t *testing.T) {
//
// 		// make and configure a mocked Usecase
// 		mockedUsecase := &TransactionsMockUsecase{
// 			TransactFunc: func(ctx context.Context, accID vos.AccountID, op operations.Operation, amount vos.Money) (vos.TransactionID, error) {
// 				panic("mock out the Transact method")
// 			},
// 		}
//
// 		// use mockedUsecase in code that requires Usecase
// 		// and then make assertions.
//
// 	}
type TransactionsMockUsecase struct {
	// TransactFunc mocks the Transact method.
	TransactFunc func(ctx context.Context, accID vos.AccountID, op operations.Operation, amount vos.Money) (vos.TransactionID, error)

	// calls tracks calls to the methods.
	calls struct {
		// Transact holds details about calls to the Transact method.
		Transact []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccID is the accID argument value.
			AccID vos.AccountID
			// Op is the op argument value.
			Op operations.Operation
			// Amount is the amount argument value.
			Amount vos.Money
		}
	}
	lockTransact sync.RWMutex
}

// Transact calls TransactFunc.
func (mock *TransactionsMockUsecase) Transact(ctx context.Context, accID vos.AccountID, op operations.Operation, amount vos.Money) (vos.TransactionID, error) {
	callInfo := struct {
		Ctx    context.Context
		AccID  vos.AccountID
		Op     operations.Operation
		Amount vos.Money
	}{
		Ctx:    ctx,
		AccID:  accID,
		Op:     op,
		Amount: amount,
	}
	mock.lockTransact.Lock()
	mock.calls.Transact = append(mock.calls.Transact, callInfo)
	mock.lockTransact.Unlock()
	if mock.TransactFunc == nil {
		var (
			transactionIDOut vos.TransactionID
			errOut           error
		)
		return transactionIDOut, errOut
	}
	return mock.TransactFunc(ctx, accID, op, amount)
}

// TransactCalls gets all the calls that were made to Transact.
// Check the length with:
//     len(mockedUsecase.TransactCalls())
func (mock *TransactionsMockUsecase) TransactCalls() []struct {
	Ctx    context.Context
	AccID  vos.AccountID
	Op     operations.Operation
	Amount vos.Money
} {
	var calls []struct {
		Ctx    context.Context
		AccID  vos.AccountID
		Op     operations.Operation
		Amount vos.Money
	}
	mock.lockTransact.RLock()
	calls = mock.calls.Transact
	mock.lockTransact.RUnlock()
	return calls
}
